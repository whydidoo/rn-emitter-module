///
/// JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <functional>

#include <functional>
#include <string>
#include <optional>
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/JAnyMap.hpp>

namespace margelo::nitro::rnemittermodule {

  using namespace facebook;

  /**
   * Represents the Java/Kotlin callback `(message: String, data: AnyMap?) -> Unit`.
   * This can be passed around between C++ and Java/Kotlin.
   */
  struct JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__: public jni::JavaClass<JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/rnemittermodule/Func_void_std__string_std__optional_std__shared_ptr_AnyMap__;";

  public:
    /**
     * Invokes the function this `JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__` instance holds through JNI.
     */
    void invoke(const std::string& message, const std::optional<std::shared_ptr<AnyMap>>& data) const {
      static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* message */, jni::alias_ref<JAnyMap::javaobject> /* data */)>("invoke");
      method(self(), jni::make_jstring(message), data.has_value() ? JAnyMap::create(data.value()) : nullptr);
    }
  };

  /**
   * An implementation of Func_void_std__string_std__optional_std__shared_ptr_AnyMap__ that is backed by a C++ implementation (using `std::function<...>`)
   */
  struct JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx final: public jni::HybridClass<JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx, JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__> {
  public:
    static jni::local_ref<JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__::javaobject> fromCpp(const std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>& func) {
      return JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx::newObjectCxxArgs(func);
    }

  public:
    /**
     * Invokes the C++ `std::function<...>` this `JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx` instance holds.
     */
    void invoke_cxx(jni::alias_ref<jni::JString> message, jni::alias_ref<JAnyMap::javaobject> data) {
      _func(message->toStdString(), data != nullptr ? std::make_optional(data->cthis()->getMap()) : std::nullopt);
    }

  public:
    [[nodiscard]]
    inline const std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>& getFunction() const {
      return _func;
    }

  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/rnemittermodule/Func_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx;";
    static void registerNatives() {
      registerHybrid({makeNativeMethod("invoke_cxx", JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx::invoke_cxx)});
    }

  private:
    explicit JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx(const std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>& func): _func(func) { }

  private:
    friend HybridBase;
    std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)> _func;
  };

} // namespace margelo::nitro::rnemittermodule
