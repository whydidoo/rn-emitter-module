///
/// JHybridRnEmitterModuleSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridRnEmitterModuleSpec.hpp"

// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }

#include <string>
#include <optional>
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/JAnyMap.hpp>
#include <functional>
#include "JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__.hpp"

namespace margelo::nitro::rnemittermodule {

  jni::local_ref<JHybridRnEmitterModuleSpec::jhybriddata> JHybridRnEmitterModuleSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridRnEmitterModuleSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridRnEmitterModuleSpec::initHybrid),
    });
  }

  size_t JHybridRnEmitterModuleSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  double JHybridRnEmitterModuleSpec::sum(double num1, double num2) {
    static const auto method = javaClassStatic()->getMethod<double(double /* num1 */, double /* num2 */)>("sum");
    auto __result = method(_javaPart, num1, num2);
    return __result;
  }
  void JHybridRnEmitterModuleSpec::sendNativeEvent(const std::string& message, const std::optional<std::shared_ptr<AnyMap>>& data) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* message */, jni::alias_ref<JAnyMap::javaobject> /* data */)>("sendNativeEvent");
    method(_javaPart, jni::make_jstring(message), data.has_value() ? JAnyMap::create(data.value()) : nullptr);
  }
  double JHybridRnEmitterModuleSpec::addRNFromNativeListener(const std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<double(jni::alias_ref<JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap__::javaobject> /* callback */)>("addRNFromNativeListener_cxx");
    auto __result = method(_javaPart, JFunc_void_std__string_std__optional_std__shared_ptr_AnyMap___cxx::fromCpp(callback));
    return __result;
  }
  void JHybridRnEmitterModuleSpec::removeListener(double id) {
    static const auto method = javaClassStatic()->getMethod<void(double /* id */)>("removeListener");
    method(_javaPart, id);
  }

} // namespace margelo::nitro::rnemittermodule
