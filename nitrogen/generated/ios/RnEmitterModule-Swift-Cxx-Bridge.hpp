///
/// RnEmitterModule-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }
// Forward declaration of `HybridRnEmitterModuleSpec` to properly resolve imports.
namespace margelo::nitro::rnemittermodule { class HybridRnEmitterModuleSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridRnEmitterModuleSpec_cxx` to properly resolve imports.
namespace RnEmitterModule { class HybridRnEmitterModuleSpec_cxx; }

// Include C++ defined types
#include "HybridRnEmitterModuleSpec.hpp"
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::rnemittermodule::bridge::swift {

  // pragma MARK: std::optional<std::shared_ptr<AnyMap>>
  /**
   * Specialized version of `std::optional<std::shared_ptr<AnyMap>>`.
   */
  using std__optional_std__shared_ptr_AnyMap__ = std::optional<std::shared_ptr<AnyMap>>;
  inline std::optional<std::shared_ptr<AnyMap>> create_std__optional_std__shared_ptr_AnyMap__(const std::shared_ptr<AnyMap>& value) {
    return std::optional<std::shared_ptr<AnyMap>>(value);
  }
  
  // pragma MARK: std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>
  /**
   * Specialized version of `std::function<void(const std::string&, const std::optional<std::shared_ptr<AnyMap>>&)>`.
   */
  using Func_void_std__string_std__optional_std__shared_ptr_AnyMap__ = std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * message * /, const std::optional<std::shared_ptr<AnyMap>>& / * data * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_std__optional_std__shared_ptr_AnyMap___Wrapper final {
  public:
    explicit Func_void_std__string_std__optional_std__shared_ptr_AnyMap___Wrapper(std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>&& func): _function(std::make_shared<std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>>(std::move(func))) {}
    inline void call(std::string message, std::optional<std::shared_ptr<AnyMap>> data) const {
      _function->operator()(message, data);
    }
  private:
    std::shared_ptr<std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>> _function;
  };
  Func_void_std__string_std__optional_std__shared_ptr_AnyMap__ create_Func_void_std__string_std__optional_std__shared_ptr_AnyMap__(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__string_std__optional_std__shared_ptr_AnyMap___Wrapper wrap_Func_void_std__string_std__optional_std__shared_ptr_AnyMap__(Func_void_std__string_std__optional_std__shared_ptr_AnyMap__ value) {
    return Func_void_std__string_std__optional_std__shared_ptr_AnyMap___Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_ = std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>;
  std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec> create_std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_(std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>
  using std__weak_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_ = std::weak_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>;
  inline std__weak_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_ weakify_std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_(const std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>& strong) { return strong; }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) {
    return Result<double>::withError(error);
  }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::rnemittermodule::bridge::swift
