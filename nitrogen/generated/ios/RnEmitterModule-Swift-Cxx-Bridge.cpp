///
/// RnEmitterModule-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "RnEmitterModule-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridRnEmitterModuleSpecSwift.hpp"
#include "RnEmitterModule-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::rnemittermodule::bridge::swift {

  // pragma MARK: std::function<void(const std::string& /* message */, const std::optional<std::shared_ptr<AnyMap>>& /* data */)>
  Func_void_std__string_std__optional_std__shared_ptr_AnyMap__ create_Func_void_std__string_std__optional_std__shared_ptr_AnyMap__(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = RnEmitterModule::Func_void_std__string_std__optional_std__shared_ptr_AnyMap__::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::string& message, const std::optional<std::shared_ptr<AnyMap>>& data) mutable -> void {
      swiftClosure.call(message, data);
    };
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec>
  std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpec> create_std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_(void* _Nonnull swiftUnsafePointer) {
    RnEmitterModule::HybridRnEmitterModuleSpec_cxx swiftPart = RnEmitterModule::HybridRnEmitterModuleSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_(std__shared_ptr_margelo__nitro__rnemittermodule__HybridRnEmitterModuleSpec_ cppType) {
    std::shared_ptr<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::rnemittermodule::HybridRnEmitterModuleSpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridRnEmitterModuleSpec\" is not implemented in Swift!");
    }
  #endif
    RnEmitterModule::HybridRnEmitterModuleSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::rnemittermodule::bridge::swift
