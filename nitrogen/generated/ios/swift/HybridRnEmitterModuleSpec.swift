///
/// HybridRnEmitterModuleSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridRnEmitterModuleSpec``
public protocol HybridRnEmitterModuleSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func sum(num1: Double, num2: Double) throws -> Double
  func sendNativeEvent(message: String, data: AnyMapHolder?) throws -> Void
  func addRNFromNativeListener(callback: @escaping (_ message: String, _ data: AnyMapHolder?) -> Void) throws -> Double
  func removeListener(id: Double) throws -> Void
}

/// See ``HybridRnEmitterModuleSpec``
public class HybridRnEmitterModuleSpec_base {
  private weak var cxxWrapper: HybridRnEmitterModuleSpec_cxx? = nil
  public func getCxxWrapper() -> HybridRnEmitterModuleSpec_cxx {
  #if DEBUG
    guard self is HybridRnEmitterModuleSpec else {
      fatalError("`self` is not a `HybridRnEmitterModuleSpec`! Did you accidentally inherit from `HybridRnEmitterModuleSpec_base` instead of `HybridRnEmitterModuleSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridRnEmitterModuleSpec_cxx(self as! HybridRnEmitterModuleSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the RnEmitterModule HybridObject.
 * Implement this protocol to create Swift-based instances of RnEmitterModule.
 * ```swift
 * class HybridRnEmitterModule : HybridRnEmitterModuleSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridRnEmitterModuleSpec = HybridRnEmitterModuleSpec_protocol & HybridRnEmitterModuleSpec_base
